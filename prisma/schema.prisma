generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")
}

enum Gender {
  Male
  Female
  Other
}

enum Role {
  Admin
  User
  SuperAdmin
}

enum Status {
  Pending
  Approved
  Rejected
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  emailVerified DateTime?
  profile       Profile?
  name          String?
  image         String?
  appointments  Appointment[] @relation("UserAppointments")
  physician     Appointment[] @relation("PhysicianAppointments")
  accounts      Account[]
  role          Role          @default(User)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([provider, providerAccountId])
}

model Profile {
  id                     Int      @id @default(autoincrement())
  name                   String
  email                  String
  phone                  String
  gender                 Gender // Enum for gender
  dob                    DateTime
  Address                String
  Occupation             String?
  InsuranceId            String?
  InsuranceProvider      String?
  Allergies              String?
  CurrentMedications     String?
  userId                 String      @unique
  user                   User     @relation(fields: [userId], references: [id])
}

model Appointment {
  id                Int      @id @default(autoincrement())
  physician         User     @relation("PhysicianAppointments", fields: [physicianId], references: [id])
  physicianId       String
  Reason            String
  Date              String
  user              User     @relation("UserAppointments", fields: [userId], references: [id])
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  AppointmentStatus Status   @default(Pending)

  @@unique([userId, physicianId]) // Enforces one appointment per physician per user
}
